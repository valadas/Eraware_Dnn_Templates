//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { DnnServicesFramework } from '@dnncommunity/dnn-elements';
export class ClientBase {

  private sf: DnnServicesFramework;
  private moduleId: number;

  constructor(configuration: ConfigureRequest) {
    this.moduleId = configuration.moduleId;
    this.sf = new DnnServicesFramework(this.moduleId);
  }

  protected getBaseUrl(_defaultUrl: string, baseUrl?: string): string {
    baseUrl = this.sf.getServiceRoot("Eraware_MyPersonaBarModule");

    // Strips the last / if present for future concatenations
    baseUrl = baseUrl.replace(/\/$/, "");

    return baseUrl || "";
  }

  protected transformOptions(options: RequestInit): Promise<RequestInit> {
    const dnnHeaders = this.sf.getModuleHeaders();

    dnnHeaders.forEach((value, key) => {
      options.headers[key] = value;
    });

    return Promise.resolve(options);
  }
}

export class EchoClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigureRequest, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Echoes the specified message.
     * @param dto (optional) The details about the message to echo back.
     * @return OK
     */
    echo(dto: EchoDto | null | undefined, signal?: AbortSignal): Promise<EchoViewModel | null> {
        let url_ = this.baseUrl + "/Echo/Echo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processEcho(_response);
        });
    }

    protected processEcho(response: Response): Promise<EchoViewModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EchoViewModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EchoViewModel | null>(null as any);
    }
}

export class LocalizationClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ConfigureRequest, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Gets localization keys and values.
     * @return OK
     */
    getLocalization(signal?: AbortSignal): Promise<LocalizationViewModel | null> {
        let url_ = this.baseUrl + "/Localization/GetLocalization";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetLocalization(_response);
        });
    }

    protected processGetLocalization(response: Response): Promise<LocalizationViewModel | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LocalizationViewModel.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LocalizationViewModel | null>(null as any);
    }
}

/** A viewmode for the echo service. */
export class EchoViewModel implements IEchoViewModel {
    /** Gets or sets the message echoed back. */
    message?: string | undefined;

    constructor(data?: IEchoViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["Message"];
        }
    }

    static fromJS(data: any): EchoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EchoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Message"] = this.message;
        return data;
    }
}

/** A viewmode for the echo service. */
export interface IEchoViewModel {
    /** Gets or sets the message echoed back. */
    message?: string | undefined;
}

/** A data transfer object for the echo service. */
export class EchoDto implements IEchoDto {
    /** Gets or sets the message to echo back. */
    message?: string | undefined;

    constructor(data?: IEchoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["Message"];
        }
    }

    static fromJS(data: any): EchoDto {
        data = typeof data === 'object' ? data : {};
        let result = new EchoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Message"] = this.message;
        return data;
    }
}

/** A data transfer object for the echo service. */
export interface IEchoDto {
    /** Gets or sets the message to echo back. */
    message?: string | undefined;
}

/** A viewmodel that exposes all resource keys in strong types. */
export class LocalizationViewModel implements ILocalizationViewModel {
    /** Localized strings present the MyPersonaBarModule resources. */
    myPersonaBarModule?: MyPersonaBarModuleInfo | undefined;

    constructor(data?: ILocalizationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.myPersonaBarModule = _data["MyPersonaBarModule"] ? MyPersonaBarModuleInfo.fromJS(_data["MyPersonaBarModule"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LocalizationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MyPersonaBarModule"] = this.myPersonaBarModule ? this.myPersonaBarModule.toJSON() : <any>undefined;
        return data;
    }
}

/** A viewmodel that exposes all resource keys in strong types. */
export interface ILocalizationViewModel {
    /** Localized strings present the MyPersonaBarModule resources. */
    myPersonaBarModule?: MyPersonaBarModuleInfo | undefined;
}

/** Localized strings for the MyPersonaBarModule resources. */
export class MyPersonaBarModuleInfo implements IMyPersonaBarModuleInfo {
    /** Gets or sets the AddItem localized text. */
    addItem?: string | undefined;
    /** Gets or sets the Cancel localized text. */
    cancel?: string | undefined;
    /** Gets or sets the Create localized text. */
    create?: string | undefined;
    /** Gets or sets the Delete localized text. */
    delete?: string | undefined;
    /** Gets or sets the DeleteItemConfirm localized text. */
    deleteItemConfirm?: string | undefined;
    /** Gets or sets the Description localized text. */
    description?: string | undefined;
    /** Gets or sets the Edit localized text. */
    edit?: string | undefined;
    /** Gets or sets the LoadMore localized text. */
    loadMore?: string | undefined;
    /** Gets or sets the Name localized text. */
    name?: string | undefined;
    /** Gets or sets the No localized text. */
    no?: string | undefined;
    /** Gets or sets the Save localized text. */
    save?: string | undefined;
    /** Gets or sets the SearchPlaceholder localized text. */
    searchPlaceholder?: string | undefined;
    /** Gets or sets the ShownItems localized text. */
    shownItems?: string | undefined;
    /** Gets or sets the Yes localized text. */
    yes?: string | undefined;
    /** Gets or sets the nav_MyPersonaBarModule localized text. */
    nav_MyPersonaBarModule?: string | undefined;

    constructor(data?: IMyPersonaBarModuleInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addItem = _data["AddItem"];
            this.cancel = _data["Cancel"];
            this.create = _data["Create"];
            this.delete = _data["Delete"];
            this.deleteItemConfirm = _data["DeleteItemConfirm"];
            this.description = _data["Description"];
            this.edit = _data["Edit"];
            this.loadMore = _data["LoadMore"];
            this.name = _data["Name"];
            this.no = _data["No"];
            this.save = _data["Save"];
            this.searchPlaceholder = _data["SearchPlaceholder"];
            this.shownItems = _data["ShownItems"];
            this.yes = _data["Yes"];
            this.nav_MyPersonaBarModule = _data["nav_MyPersonaBarModule"];
        }
    }

    static fromJS(data: any): MyPersonaBarModuleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new MyPersonaBarModuleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AddItem"] = this.addItem;
        data["Cancel"] = this.cancel;
        data["Create"] = this.create;
        data["Delete"] = this.delete;
        data["DeleteItemConfirm"] = this.deleteItemConfirm;
        data["Description"] = this.description;
        data["Edit"] = this.edit;
        data["LoadMore"] = this.loadMore;
        data["Name"] = this.name;
        data["No"] = this.no;
        data["Save"] = this.save;
        data["SearchPlaceholder"] = this.searchPlaceholder;
        data["ShownItems"] = this.shownItems;
        data["Yes"] = this.yes;
        data["nav_MyPersonaBarModule"] = this.nav_MyPersonaBarModule;
        return data;
    }
}

/** Localized strings for the MyPersonaBarModule resources. */
export interface IMyPersonaBarModuleInfo {
    /** Gets or sets the AddItem localized text. */
    addItem?: string | undefined;
    /** Gets or sets the Cancel localized text. */
    cancel?: string | undefined;
    /** Gets or sets the Create localized text. */
    create?: string | undefined;
    /** Gets or sets the Delete localized text. */
    delete?: string | undefined;
    /** Gets or sets the DeleteItemConfirm localized text. */
    deleteItemConfirm?: string | undefined;
    /** Gets or sets the Description localized text. */
    description?: string | undefined;
    /** Gets or sets the Edit localized text. */
    edit?: string | undefined;
    /** Gets or sets the LoadMore localized text. */
    loadMore?: string | undefined;
    /** Gets or sets the Name localized text. */
    name?: string | undefined;
    /** Gets or sets the No localized text. */
    no?: string | undefined;
    /** Gets or sets the Save localized text. */
    save?: string | undefined;
    /** Gets or sets the SearchPlaceholder localized text. */
    searchPlaceholder?: string | undefined;
    /** Gets or sets the ShownItems localized text. */
    shownItems?: string | undefined;
    /** Gets or sets the Yes localized text. */
    yes?: string | undefined;
    /** Gets or sets the nav_MyPersonaBarModule localized text. */
    nav_MyPersonaBarModule?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export interface ConfigureRequest {
  moduleId: number;
}
