//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace $ext_rootnamespace$.Services.Localization
{
    using DotNetNuke.Common.Utilities;
    using DotNetNuke.Services.Localization;
    using System.Diagnostics.CodeAnalysis;
    using System.Web.Hosting;
    using System.Threading;
    using static $ext_rootnamespace$.Services.Localization.LocalizationViewModel;

    /// <summary>
    /// Provides strongly typed localization services for this module.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class LocalizationService : ILocalizationService
    {
        private readonly ILocalizationProvider localizationProvider;
        private readonly LocalizationViewModel viewModel;
        private readonly string cacheKey;
        private string resourceFileRoot;

        private string ResourceFileRoot
        {
            get
            {
                if (string.IsNullOrWhiteSpace(this.resourceFileRoot))
                {
                    this.resourceFileRoot = "~/DesktopModules/$ext_safeprojectname$/resources/App_LocalResources/";
                }

                return this.resourceFileRoot;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationService"/> class.
        /// </summary>
        public LocalizationService()
        {
            this.localizationProvider = new LocalizationProvider();
            this.cacheKey = "$ext_rootnamespace$" + "_Localization_" + Thread.CurrentThread.CurrentCulture;
            this.viewModel = new LocalizationViewModel();
            var viewModel = DataCache.GetCache<LocalizationViewModel>(this.cacheKey);
            if (viewModel is null)
            {
                viewModel = this.HydrateViewModel();
                DataCache.SetCache(this.cacheKey, viewModel);
            }
            this.viewModel = viewModel;
        }

        /// <summary>
        /// A viewmodel that strongly types all resource keys.
        /// </summary>
        public LocalizationViewModel ViewModel
        {
            get
            {
                return this.viewModel;
            }
        }

        private string GetString(string key, string file)
        {
            return this.localizationProvider.GetString(key, this.ResourceFileRoot + file);
        }

        private LocalizationViewModel HydrateViewModel()
        {
            var $ext_safeprojectname$ = new $ext_safeprojectname$Info
            {
                AddItem = this.GetString("AddItem", "$ext_safeprojectname$.resx"),
                Cancel = this.GetString("Cancel", "$ext_safeprojectname$.resx"),
                Create = this.GetString("Create", "$ext_safeprojectname$.resx"),
                Delete = this.GetString("Delete", "$ext_safeprojectname$.resx"),
                DeleteItemConfirm = this.GetString("DeleteItemConfirm", "$ext_safeprojectname$.resx"),
                Description = this.GetString("Description", "$ext_safeprojectname$.resx"),
                Edit = this.GetString("Edit", "$ext_safeprojectname$.resx"),
                LoadMore = this.GetString("LoadMore", "$ext_safeprojectname$.resx"),
                Name = this.GetString("Name", "$ext_safeprojectname$.resx"),
                No = this.GetString("No", "$ext_safeprojectname$.resx"),
                Save = this.GetString("Save", "$ext_safeprojectname$.resx"),
                SearchPlaceholder = this.GetString("SearchPlaceholder", "$ext_safeprojectname$.resx"),
                ShownItems = this.GetString("ShownItems", "$ext_safeprojectname$.resx"),
                Yes = this.GetString("Yes", "$ext_safeprojectname$.resx"),
                nav_$ext_safeprojectname$ = this.GetString("nav_$ext_safeprojectname$", "$ext_safeprojectname$.resx"),

            };
            viewModel.$ext_safeprojectname$ = $ext_safeprojectname$;
            return viewModel;

        }
    }
}

